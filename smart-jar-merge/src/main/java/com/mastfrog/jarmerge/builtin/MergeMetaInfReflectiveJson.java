/*
 * The MIT License
 *
 * Copyright 2021 Mastfrog Technologies.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.mastfrog.jarmerge.builtin;

import com.mastfrog.jarmerge.MergeLog;
import com.mastfrog.jarmerge.support.AbstractJarFilter;
import com.mastfrog.jarmerge.support.JsonListCoalescer;
import java.nio.file.Path;
import java.util.jar.JarEntry;

/**
 * Takes care of merging META-INF/injection/reflective.json files which are in
 * the format Graal understands, and are generated by the
 * injection-reflection-indexer annotation processor so that anything annotated
 * with &#064;Inject will have the class members exposed that are needed for
 * Guice or similar to instantiate them via reflection.
 *
 * @author Tim Boudreau
 */
public class MergeMetaInfReflectiveJson extends AbstractJarFilter<JsonListCoalescer> {

    private static final String FILE_NAME = "META-INF/injection/reflective.json";
    private JsonListCoalescer coa;

    @Override
    public JsonListCoalescer findCoalescer(String path, Path inJar, JarEntry entry, MergeLog log) {
        if (FILE_NAME.equals(path)) {
            if (coa == null) {
                coa = new JsonListCoalescer(FILE_NAME, zeroDates());
            }
            return coa;
        }
        return null;
    }

    @Override
    public boolean omit(String name, Path inJar, MergeLog log) {
        // Special handling for Graal - native-image goes insane if it finds itself
        // among its classes to compile - there's no use-case I can see for allowing
        // bundling anything but its annotations
        if (name.startsWith("com/oracle/svm") && !name.startsWith("com/oracle/svm/core/annotate")) {
            return true;
        }
        return false;
    }

    @Override
    public String description() {
        return "Merges " + FILE_NAME + " files generated by the injection-reflection-indexer "
                + "annotation processor to catalog class elements annotated with @Inject which "
                + "need to be described to the Graal VM when generating a native binary, in the "
                + "JSON format Graal uses";
    }
}
